function [mainhandles, choseReturn] = checkforToolboxes(mainhandles, varargin)
% Checks the existence of MATLAB toolboxes
%
%    Input:
%     mainhandles               - handles structure of the main window
%     'curve_fitting_toolbox'   - Curvefitting toolbox
%     'optimization_toolbox'    - Optimization toolbox
%     'signal_toolbox'          - Signal processing toolboxes
%     'statistics_toolbox'      - Statistics toolbox
%     'image_toolbox'           - Image processing toolbox
%     ...
%
%    Output:
%     choseReturn      - 1 if user chose not to continue without toolboxes
%     handles          - ..
%
%    Example:
%     choseReturn = checkforToolboxes('curve_fitting_toolbox',...
%                                    'optimization_toolbox',...
%                                    'statistics_toolbox')
%
%    All toolbox id's:
% featureStr = {'Aerospace_Blockset'; ...
%               'Aerospace_Toolbox'; ...
%               'Bioinformatics_Toolbox'; ...
%               'Communication_Blocks'; ...
%               'Communication_Toolbox'; ...
%               'Compiler'; ...
%               'Control_Toolbox'; ...
%               'Curve_Fitting_Toolbox'; ...
%               'Data_Acq_Toolbox'; ...
%               'Database_Toolbox'; ...
%               'Datafeed_Toolbox'; ...
%               'Dial_and_Gauge_Blocks'; ...
%               'Distrib_Computing_Toolbox'; ...
%               'Econometrics_Toolbox'; ...
%               'EDA_Simulator_Link_DS'; ...
%               'Embedded_Target_c166'; ...
%               'Embedded_Target_c2000'; ...
%               'Embedded_Target_c6000'; ...
%               'Embedded_Target_MPC555'; ...
%               'Excel_Link'; ...
%               'Filter_Design_HDL_Coder'; ...
%               'Filter_Design_Toolbox'; ...
%               'Fin_Derivatives_Toolbox'; ...
%               'Financial_Toolbox'; ...
%               'Fixed_Income_Toolbox'; ...
%               'Fixed_Point_Toolbox'; ...
%               'Fixed-Point_Blocks'; ...
%               'Fuzzy_Toolbox'; ...
%               'GADS_Toolbox'; ...
%               'IDE_Link_MU'; ...
%               'Identification_Toolbox'; ...
%               'Image_Acquisition_Toolbox'; ...
%               'Image_Toolbox'; ...
%               'Instr_Control_Toolbox'; ...
%               'Link_for_Incisive'; ...
%               'Link_for_ModelSim'; ...
%               'Link_for_Tasking'; ...
%               'Link_for_VisualDSP'; ...
%               'MAP_Toolbox'; ...
%               'MATLAB'; ...
%               'MATLAB_Builder_for_dot_Net'; ...
%               'MATLAB_Builder_for_Java'; ...
%               'MATLAB_Distrib_Comp_Engine'; ...
%               'MATLAB_Excel_Builder'; ...
%               'MATLAB_Link_for_CCS'; ...
%               'MATLAB_Report_Gen'; ...
%               'MBC_Toolbox'; ...
%               'MPC_Toolbox'; ...
%               'NCD_Toolbox'; ...
%               'Neural_Network_Toolbox'; ...
%               'OPC_Toolbox'; ...
%               'Optimization_Toolbox'; ...
%               'PDE_Toolbox'; ...
%               'Power_System_Blocks'; ...
%               'Real-Time_Win_Target'; ...
%               'Real-Time_Workshop'; ...
%               'RF_Blockset'; ...
%               'RF_Toolbox'; ...
%               'Robust_Toolbox'; ...
%               'RTW_Embedded_Coder'; ...
%               'Signal_Blocks'; ...
%               'Signal_Toolbox'; ...
%               'SimBiology'; ...
%               'SimDriveline'; ...
%               'SimElectronics'; ...
%               'SimEvents'; ...
%               'SimHydraulics'; ...
%               'SimMechanics'; ...
%               'Simscape'; ...
%               'SIMULINK'; ...
%               'Simulink_Control_Design'; ...
%               'Simulink_Design_Verifier'; ...
%               'Simulink_HDL_Coder'; ...
%               'Simulink_Param_Estimation'; ...
%               'SIMULINK_Report_Gen'; ...
%               'SL_Verification_Validation'; ...
%               'Spline_Toolbox'; ...
%               'Stateflow'; ...
%               'Stateflow_Coder'; ...
%               'Statistics_Toolbox'; ...
%               'Symbolic_Toolbox'; ...
%               'SystemTest'; ...
%               'Video_and_Image_Blockset'; ...
%               'Virtual_Reality_Toolbox'; ...
%               'Wavelet_Toolbox'; ...
%               'XPC_Embedded_Option'; ...
%               'XPC_Target'};%

% --- Copyrights (C) ---
%
% Copyright (C) 2014  Søren Preus, FluorTools.com
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     The GNU General Public License is found at
%     <http://www.gnu.org/licenses/gpl.html>.


% Default
choseReturn = 0;

% Return if not meant to do checking
if isdeployed || ~mainhandles.settings.startup.checkToolbox
    return
end

if nargin<2
    return
end
if isdeployed
    return
end

% All toolboxes and their identifiers
toolboxes = {...
    'curve_fitting_toolbox', 'Curve fitting toolbox';...
    'optimization_toolbox', 'Optimization toolbox';...
    'signal_toolbox', 'Signal processing toolboxes';...
    'statistics_toolbox', 'Statistics toolbox';...
    'image_toolbox', 'Image processing toolbox';...
    'bioinformatics_toolbox', 'Bioinformatics toolbox'};

% Initialize output message
message = sprintf('Sorry, but you do not seem to have the following toolboxes installed:\n\n');

ok = 0; % Identifier
for i = 1:nargin-1
    
    tbx = varargin{i}; % Toolbox i identifier
    hasTB = license('test', tbx); % Test existence of toolbox
    if ~hasTB % User does not have the toolbox installed.
        
        idx = find(strcmpi(toolboxes(:,1), tbx)); % Row index of tbx in the toolboxes cell array
        
        if isempty(idx) % If toolbox is not part of toolboxes cell array
            error('Input toolbox not understood')
        end
        
        tbxname = toolboxes{idx,2}; % Name of toolbox
        message = sprintf('%s  - %s\n', message, tbxname); % Update message
        
        ok = 1; % Ok to display questdlg
        
    end
end

% If one of the toolboxes is missing, display choice dialog
if ok
    message = sprintf('%s\nSome features of the software require these toolboxes. Do you want to try to continue anyway?\n',message);
    reply = myquestdlg(message, 'Toolbox missing', ' Continue at own risk ', ' Close ', ' Continue at own risk ');
    if isempty(reply) || strcmpi(reply, ' Close ')
        % User said no
        choseReturn = 1;
    end
    
    % Put attention back to GUI. This is important in order not to crash in
    % some versions of MATLAB
    state = get(mainhandles.figure1,'Visible');
    figure(mainhandles.figure1)
    set(mainhandles.figure1,'Visible',state)
    
else
    
    % Save setting about not checking for this again. This is in order to
    % avoid delay times on GUI startup when the license is server-based
    mainhandles = savesettingasDefault(mainhandles,'startup','checkToolbox',0);
    
end

function answer = removePairs(mainhandle,DefAns)
% removePairs creates a modal dialog box that returns user input for
% multiple prompts in the cell array ANSWER. removePairs uses UIWAIT
% to suspend execution until the user responds.
%
%    Input:
%     mainhandle   - handle to the main figure window
%     DefAns       - default answers structure
%
%    Output:
%     answer       - structure matching DefAns with user selection
%

% --- Copyrights (C) ---
%
% This file is part of:
% iSMS - Single-molecule FRET microscopy software
% Copyright (C) Aarhus University, @ V. Birkedal Lab
% <http://isms.au.dk>
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     The GNU General Public License is found at
%     <http://www.gnu.org/licenses/gpl.html>.

%% Initialize

answer = [];

% Check number of input arguments
if (isempty(mainhandle)) || (~ishghandle(mainhandle))
    return
end
mainhandles = guidata(mainhandle); % Get mainhandles structure

%% Create GUI window

h.figure1 = dialog(...
    'Name',     'Remove all pairs according to criteria',...
    'Units',    'pixels',...
    'Position', [520  445  406  313],...
    'Visible',  'off',...
    'UserData', 'Cancel');
movegui(h.figure1,'center')

%--------- Create GUI components ---------%
% Checkbox, apply background subtraction choice
h.ChoiceCheckbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'check',...
    'String',   'Use background subtraction',...
    'Units',    'pixels',...
    'Position', [17  277  169  23],...
    'Value',    DefAns.choice);

% Textbox, background type
h.backgroundtypeTextbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'text',...
    'String',   'Background:',...
    'HorizontalAlignment',   'left',...
    'Units',    'pixels',...
    'position', [34  246  70  14]);
% Popupmenu, background type 
h.backgroundtypeListbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'popupmenu',...
    'String',   {'Avg. intensity of pixels just outside integration area',...
                'Gaussian baseline (requires 2D Gaussian fitting)',...
                'Measured laser spot-profile (requires a spot-profile)'},...
    'Value',    DefAns.backtype,...
    'Units',    'pixels',...
    'Position', [103  245  285  20],...
    'BackgroundColor',  'white'...
    );

% Checkbox, use intensity after bleaching
h.intensityAfterBleachingCheckbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'check',...
    'String',   'Use average intensity after bleaching whenever possible',...
    'Value',    DefAns.bleachchoice,...
    'Units',    'pixels',...
    'Position', [65  210  320  23]...
    );
% Textbox, use intensity after bleaching note
h.intensityAfterBleachingTextbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'text',...
    'String',   '(applied to traces where the bleaching time is defined)',...
    'HorizontalAlignment',   'left',...
    'units',    'pixels',...
    'position', [62  191  366  14]...
    );

% Textbox, frame averaging
h.frameAveragingTextbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'text',...
    'String',   'Frame averaging:',...
    'HorizontalAlignment',   'left',...
    'units',    'pixels',...
    'position', [34  151  93  14]...
    );
% Popupmenu, frame averaging
h.frameAveragingListbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'popupmenu',...
    'String',   {'No averaging',...
                'Average background of neighbouring frames',...
                'Average background over all frames'},...
    'Value',    DefAns.avgchoice,...
    'Units',    'pixels',...
    'Position', [128  150  260  20],...
    'BackgroundColor',  'white'...
    );

% Textbox, number of neighbouring frames averaged
h.avgneighboursTextbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'text',...
    'String',   'Number of neighbouring frames averaged:',...
    'HorizontalAlignment',   'left',...
    'units',    'pixels',...
    'position', [135  123  211  14]...
    );
% Editbox, number of neighbouring frames to average
h.avgneighboursEditbox = uicontrol(...
    'Parent',   h.figure1,...
    'String',   DefAns.avgneighbours,...
    'Style',    'edit',...
    'Units',    'pixels',...
    'Position', [357  119  31  22],...
    'BackgroundColor',  'white'...
    );

% Textbox, default space width
h.backspaceTextbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'text',...
    'String',   'Default empty space from integration to background (pixels):',...
    'HorizontalAlignment',   'left',...
    'units',    'pixels',...
    'position', [34  88  313  14]...
    );
% Editbox, default space width
h.backspaceEditbox = uicontrol(...
    'Parent',   h.figure1,...
    'String',   DefAns.backspace,...
    'Style',    'edit',...
    'Units',    'pixels',...
    'Position', [357  85  31  22],...
    'BackgroundColor',  'white'...
    );

% Textbox, default background circle width
h.backwidthTextbox = uicontrol(...
    'Parent',   h.figure1,...
    'Style',    'text',...
    'String',   'Default width of background circle (pixels):',...
    'HorizontalAlignment',   'left',...
    'units',    'pixels',...
    'position', [34  58  313  14]...
    );
% Editbox, default background circle width
h.backwidthEditbox = uicontrol(...
    'Parent',   h.figure1,...
    'String',   DefAns.backwidth,...
    'Style',    'edit',...
    'Units',    'pixels',...
    'Position', [357  55  31  22],...
    'BackgroundColor',  'white'...
    );

%-- OK pushbutton --%
h.OKpushbutton = uicontrol(...
    'Parent',   h.figure1,...
    'String',   'OK',...
    'Style',    'pushbutton',...
    'Units',    'pixels',...
    'Position', [231  13  69  23]...
    );

%-- Cancel pushbutton --%
h.CancelPushbutton = uicontrol(...
    'Parent',   h.figure1,...
    'String',   'Cancel',...
    'Style',    'pushbutton',...
    'Units',    'pixels',...
    'Position', [314  13  69  23]...
    );

%% Set callbacks

set(h.ChoiceCheckbox,'Callback',{@updateGUI, h}); % Assign callback
set(h.backgroundtypeListbox,'Callback',{@updateGUI, h}); % Assign callback
set(h.frameAveragingListbox,'Callback',{@updateGUI, h}); % Assign callback
set(h.backspaceEditbox,'Callback',{@updateGUI, h}); % Assign callback
set(h.backwidthEditbox,'Callback',{@updateGUI, h}); % Assign callback
set(h.frameAveragingListbox,'Callback',{@updateGUI, h}); % Assign callback
set(h.avgneighboursEditbox,'Callback',{@avgneighboursEditbox_Callback, h}); % Assign callback
set(h.OKpushbutton,'Callback',{@pushbutton_Callback, h}); % Assign callback
set(h.CancelPushbutton,'Callback',{@pushbutton_Callback, h}); % Assign callback

%% Update dialog

guidata(h.figure1,h)
updateGUI([],[],h)
set(h.figure1,'Visible','on')

% For closing the figure
if ishghandle(h.figure1)
  % Go into uiwait if the figure handle is still valid.
  % This is mostly the case during regular use.
  uiwait(h.figure1);
end

%% This code hereafter is only run once uiresume is called

% Check handle validity again since we may be out of uiwait because the
% figure was deleted.
if ishghandle(h.figure1)
  if strcmp(get(h.figure1,'UserData'),'OK')
      answer.choice = get(h.ChoiceCheckbox,'Value'); % Use background subtraction
      answer.backtype = get(h.backgroundtypeListbox,'Value'); % How background is calculated. 1 = avg intensity just outside integration area. 2 = baseline from Gaussian fit. 3 = from spot-profile.
      answer.bleachchoice = get(h.intensityAfterBleachingCheckbox,'Value'); % Whenever possible, use average intensity of user-specified trace time-interval (e.g. after bleaching)
      answer.avgchoice = get(h.frameAveragingListbox,'Value'); % 1 = Don't use averaging. 2 = Use averaging of neighbouring frames in background calculation. 3 = Use background averaged from all frames
      answer.avgneighbours = str2num(get(h.avgneighboursEditbox,'String')); % How many neighbours to average (if avgchoice == 2)
      answer.backspace = str2num(get(h.backspaceEditbox,'String')); % Default width in between integration area and background circler
      answer.backwidth = str2num(get(h.backwidthEditbox,'String')); % Default width of background ring /pixels
  end
  delete(h.figure1);
else
  answer = [];
end

%-----------------------------------------------------------%
%-----------------------------------------------------------%
%-----------------------------------------------------------%

function pushbutton_Callback(hObject,eventdata,h) %%
if ~strcmp(get(hObject,'String'),'Cancel')
    set(gcbf,'UserData','OK');
    uiresume(gcbf);
else
    delete(gcbf)
end

function updateGUI(Object,eventdata,h) %% Updates the visibility of the individual GUI components depending on the selection choices
h_temp = [h.backgroundtypeTextbox  h.backgroundtypeListbox...
    h.intensityAfterBleachingCheckbox  h.intensityAfterBleachingTextbox...
    h.frameAveragingTextbox  h.frameAveragingListbox...
    h.avgneighboursTextbox  h.avgneighboursEditbox...
    h.backspaceTextbox h.backspaceEditbox...
    h.backwidthTextbox h.backwidthEditbox...
    ];

% Check use background
if get(h.ChoiceCheckbox,'Value')==1
    set(h_temp,'Visible','on')
elseif get(h.ChoiceCheckbox,'Value')==0
    set(h_temp,'Visible','off')
    return
end

% Check background type
typechoice = get(h.backgroundtypeListbox,'Value');
h_temp = [h.frameAveragingTextbox  h.frameAveragingListbox...
    h.avgneighboursTextbox  h.avgneighboursEditbox...
    h.backspaceTextbox h.backspaceEditbox...
    h.backwidthTextbox h.backwidthEditbox];
if (typechoice==4)
    set(h_temp,'Visible','off')
else
    set(h_temp,'Visible','on')
end

% Check frame averaging
avgchoice = get(h.frameAveragingListbox,'Value');
h_temp = [h.avgneighboursTextbox  h.avgneighboursEditbox];
if ismember(typechoice,[1 2 3]) && (avgchoice==2)
    set(h_temp,'Visible','on')
elseif (avgchoice==1) || (avgchoice==3)
    set(h_temp,'Visible','off')
end

% Check default backspace and backwidth values
backspace = str2num(get(h.backspaceEditbox,'String'));
backwidth = str2num(get(h.backwidthEditbox,'String'));
if backspace<0
    set(h.backspaceEditbox,'String', 0);
end
if backwidth<1
    set(h.backwidthEditbox,'String', 1);
end

function avgneighboursEditbox_Callback(Object,event,h)
value = round(abs(str2num(get(Object,'String'))));
if ~isodd(value)
    value = value+1;
end
set(Object,'String',value)    
